{"version":3,"file":"static/js/979.5a5f4bab.chunk.js","mappings":"oMAGaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CAAcC,EAAAA,GAAOC,EAAAA,GAAOC,EAAAA,K,2ICAlCC,GAASJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,0GAMNM,EAAQN,EAAAA,GAAAA,MAAH,mGAMLO,GAAQP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,4DAKLS,EAAYT,EAAAA,GAAAA,EAAH,2DAKTU,EAASV,EAAAA,GAAAA,OAAH,4N,UCfbW,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,MAAOL,EAAAA,KAEJG,QACC,6EACA,gGAEDC,aAGCE,EAAY,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNK,OAAQ,SAAAC,GAAO,OAAI,SAACX,EAAD,UAAYW,QAK/BC,EAAgB,CACpBP,KAAM,GACNG,MAAO,IAGIK,EAAc,WAkBzB,OACE,SAAC,KAAD,CACED,cAAeA,EACfE,iBAAkBZ,EAClBa,SAlBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GAEZC,KAYA,UAKE,UAACtB,EAAD,CAAQyB,aAAa,MAArB,WACE,UAACvB,EAAD,YACE,oCACA,SAACC,EAAD,CAAOuB,KAAK,OAAOhB,KAAK,UACxB,SAACI,EAAD,CAAWJ,KAAK,aAGlB,UAACR,EAAD,YACE,sCACA,SAACC,EAAD,CAAOuB,KAAK,MAAMhB,KAAK,WACvB,SAACI,EAAD,CAAWJ,KAAK,QAAQiB,UAAU,YAEpC,SAACrB,EAAD,CAAQoB,KAAK,SAAb,+B,oBC3EKE,EAAOhC,EAAAA,GAAAA,GAAH,iEAIJiC,EAAcjC,EAAAA,GAAAA,EAAH,sBACXkC,EAAgBlC,EAAAA,GAAAA,EAAH,8CCJbmC,GDOSnC,EAAAA,GAAAA,OAAH,iPCPQ,SAAC,GAAwB,EAAtBoC,GAAuB,IAAnBtB,EAAkB,EAAlBA,KAAMG,EAAY,EAAZA,MAGtC,OACE,UAACe,EAAD,YACE,SAACC,EAAD,UAAcnB,KACd,SAACoB,EAAD,UAAgBjB,SCPToB,EAAOrC,EAAAA,GAAAA,GAAH,2DCEJsC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OACE,SAACF,EAAD,UACGE,EAASC,KAAI,SAAAC,GAAO,OACnB,SAACN,GAAD,UAAkCM,GAAhBA,EAAQL,U,8BCgClC,EA5BiB,WAEf,IAAMG,GAAWG,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,aACvBC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAC,EAAAA,EAAAA,YAAU,WACRF,EAASG,EAAAA,GAAAA,SACR,CAACH,KAGF,UAAC7C,EAAA,EAAD,CAAKE,MAAM,QAAQ+C,GAAI,EAAGC,GAAI,EAAGC,EAAE,YAAYC,MAAO,EAAtD,WACE,uCACA,SAAC7B,EAAD,KACA,qCASCiB,IAAY,SAACD,EAAD,CAAaC,SAAUA,KACpC,SAAC,KAAD,CAAgBa,UAAW","sources":["components/Box.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { color, space, layout } from 'styled-system';\n\nexport const Box = styled('div')(color, space, layout);\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormEl = styled(Form)`\n  margin-bottom: 32px;\n  border: 2px dotted;\n  padding: 16px;\n  width: 380px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 16px;\n  gap: 4px;\n`;\nexport const Input = styled(Field)`\n  width: 100%;\n  font-size: 14px;\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 12px;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 16px;\n  cursor: pointer;\n  font-family: inherit;\n  color: white;\n  background-color: #6fa7f0;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  border: 0;\n  border-radius: 4px;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n// import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// import {\n//   useAddContactMutation,\n//   useGetContactsQuery,\n// } from 'redux/contacts/contactsSlice';\nimport { FormEl, Label, Input, ErrorText, Button } from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  phone: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst initialValues = {\n  name: '',\n  phone: '',\n};\n\nexport const ContactForm = () => {\n  // const { data: contacts } = useGetContactsQuery();\n  // const [addContact] = useAddContactMutation();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    // addContactItem(values);\n    resetForm();\n  };\n\n  // const addContactItem = newContact => {\n  //   if (contacts.find(contact => contact.name === newContact.name)) {\n  //     toast.error(`${newContact.name} is already in contacts.`);\n  //     return;\n  //   }\n  //   addContact(newContact);\n  // };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormEl autoComplete=\"off\">\n        <Label>\n          <span>Name</span>\n          <Input type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </Label>\n\n        <Label>\n          <span>Number</span>\n          <Input type=\"tel\" name=\"phone\" />\n          <FormError name=\"phone\" component=\"div\" />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormEl>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  margin-bottom: 8px;\n`;\nexport const ContactName = styled.p``;\nexport const ContactNumber = styled.p`\n  margin-left: 16px;\n`;\nexport const Button = styled.button`\n  margin-left: auto;\n  padding: 2px 8px;\n  cursor: pointer;\n  font-family: inherit;\n  color: white;\n  background-color: #96bbeb;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  border: 0;\n  border-radius: 4px;\n`;\n","// import { useRemoveContactMutation } from 'redux/contacts/contactsSlice';\nimport { Item, ContactName, ContactNumber } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, phone }) => {\n  // const [removeContact, { isLoading: isRemoving }] = useRemoveContactMutation();\n\n  return (\n    <Item>\n      <ContactName>{name}</ContactName>\n      <ContactNumber>{phone}</ContactNumber>\n      {/* <Button\n        disabled={isRemoving}\n        type=\"button\"\n        onClick={() => removeContact(id)}\n      >\n        Delete\n      </Button> */}\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 16px;\n  width: 380px;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = ({ contacts }) => {\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      createdAt: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { Box } from '../components/Box';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ToastContainer } from 'react-toastify';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useEffect } from 'react';\n// import { Title, Subtitle } from './Titles.styled';\n// import { Loader } from './Loader/Loader';\n// import { useContacts } from 'hooks/useContacts';\n\nconst Contacts = () => {\n  // const { filter, setFilter, filteredContacts, isFetching } = useContacts();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.get());\n  }, [dispatch]);\n\n  return (\n    <Box color=\"black\" pl={3} pr={3} m=\"32px auto\" width={1}>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h3>Contacts</h3>\n      {/* <ContactFilter\n        value={filter}\n        onChange={e => setFilter(e.currentTarget.value)}\n      /> */}\n      {/* {isFetching && <Loader />}\n      {filteredContacts.length !== 0 && (\n        <ContactList contacts={filteredContacts} />\n      )} */}\n      {contacts && <ContactList contacts={contacts} />}\n      <ToastContainer autoClose={3000} />\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["Box","styled","color","space","layout","FormEl","Form","Label","Input","Field","ErrorText","Button","schema","yup","shape","name","matches","required","phone","FormError","render","message","initialValues","ContactForm","validationSchema","onSubmit","values","resetForm","console","log","autoComplete","type","component","Item","ContactName","ContactNumber","ContactItem","id","List","ContactList","contacts","map","contact","useSelector","contactsSelectors","dispatch","useDispatch","useEffect","contactsOperations","pl","pr","m","width","autoClose"],"sourceRoot":""}