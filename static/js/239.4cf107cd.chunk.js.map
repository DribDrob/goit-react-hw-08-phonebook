{"version":3,"file":"static/js/239.4cf107cd.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","pages/Contacts.jsx"],"sourcesContent":["import * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Button from '@mui/material/Button';\nimport { Box, TextField } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\n// const FormError = ({ name }) => {\n//   return (\n//     <ErrorMessage\n//       name={name}\n//       render={message => <ErrorText>{message}</ErrorText>}\n//     />\n//   );\n// };\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    dispatch(contactsOperations.add(values));\n    resetForm();\n  };\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  // const addContactItem = newContact => {\n  //   if (contacts.find(contact => contact.name === newContact.name)) {\n  //     toast.error(`${newContact.name} is already in contacts.`);\n  //     return;\n  //   }\n  //   addContact(newContact);\n  // };\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        mt: 1,\n        textAlign: 'center',\n      }}\n    >\n      <TextField\n        margin=\"normal\"\n        fullWidth\n        required\n        size=\"small\"\n        id=\"name\"\n        label=\"Name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        autoComplete=\"name\"\n        autoFocus\n      />\n      <TextField\n        margin=\"normal\"\n        fullWidth\n        required\n        size=\"small\"\n        name=\"number\"\n        label=\"Number\"\n        type=\"number\"\n        id=\"number\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        autoComplete=\"current-number\"\n      />\n      <Button type=\"submit\" variant=\"contained\" sx={{ mt: 3, mb: 2, px: 3 }}>\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  margin-bottom: 8px;\n`;\nexport const ContactName = styled.p``;\nexport const ContactNumber = styled.p`\n  margin-left: 16px;\n`;\nexport const Button = styled.button`\n  margin-left: auto;\n  padding: 2px 8px;\n  cursor: pointer;\n  font-family: inherit;\n  color: white;\n  background-color: #96bbeb;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  border: 0;\n  border-radius: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { Item, ContactName, ContactNumber, Button } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const isContactsLoading = useSelector(contactsSelectors.isContactsLoading);\n  const dispatch = useDispatch();\n  return (\n    <Item>\n      <ContactName>{name}</ContactName>\n      <ContactNumber>{number}</ContactNumber>\n      <Button type=\"button\">Edit</Button>\n      <Button\n        disabled={isContactsLoading}\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.remove(id))}\n      >\n        Delete\n      </Button>\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 16px;\n  width: 380px;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = ({ contacts }) => {\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const FilterField = styled.label`\n  display: flex;\n  margin-bottom: 8px;\n  width: 380px;\n  > input {\n    margin-left: auto;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/contacts/contactsSelectors';\nimport { changeFilter } from 'redux/contacts/contactsSlice';\nimport { FilterField } from './ContactFilter.styled';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterField>\n      <span>Find contacts by name</span>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n      />\n    </FilterField>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ToastContainer } from 'react-toastify';\nimport { contactsOperations } from 'redux/contacts';\nimport { useEffect } from 'react';\n// import { Title, Subtitle } from './Titles.styled';\n// import { Loader } from './Loader/Loader';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { getContacts, getFilterValue } from 'redux/contacts/contactsSelectors';\nimport { Box, Typography } from '@mui/material';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.get());\n  }, [dispatch]);\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilterValue);\n\n  const showFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const contactsItems = showFilteredContacts();\n\n  return (\n    <Box\n      sx={{\n        my: 8,\n        mx: 4,\n        display: 'flex',\n        // flexDirection: 'column',\n        alignItems: 'top',\n      }}\n    >\n      <Box\n        sx={{\n          mx: 4,\n        }}\n      >\n        <Typography variant=\"h5\" component=\"p\" sx={{ flexGrow: 1 }}>\n          Fill to add a contact\n        </Typography>\n        <ContactForm />\n      </Box>\n      <Box\n        sx={{\n          mx: 4,\n        }}\n      >\n        <Typography variant=\"h5\" component=\"p\" sx={{ flexGrow: 1 }}>\n          Contacts\n        </Typography>\n        <ContactFilter />\n        {/* {isFetching && <Loader />} */}\n        {contactsItems.length !== 0 && <ContactList contacts={contactsItems} />}\n        <ToastContainer autoClose={3000} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["schema","yup","shape","name","matches","required","number","initialValues","ContactForm","dispatch","useDispatch","formik","useFormik","validationSchema","onSubmit","values","resetForm","console","log","contactsOperations","Box","component","handleSubmit","sx","mt","textAlign","TextField","margin","fullWidth","size","id","label","value","onChange","handleChange","error","touched","Boolean","errors","autoComplete","autoFocus","type","Button","variant","mb","px","Item","styled","ContactName","ContactNumber","ContactItem","isContactsLoading","useSelector","contactsSelectors","disabled","onClick","List","ContactList","contacts","map","contact","FilterField","ContactFilter","filter","getFilterValue","e","changeFilter","currentTarget","useEffect","getContacts","contactsItems","toLowerCase","includes","my","mx","display","alignItems","Typography","flexGrow","length","autoClose"],"sourceRoot":""}